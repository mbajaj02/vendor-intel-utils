From 815cc87c1b4be278766c465cc4cc4ba2f87d8053 Mon Sep 17 00:00:00 2001
From: Manvi Bajaj <manvi.bajaj@intel.com>
Date: Mon, 17 Mar 2025 12:02:04 +0000
Subject: [PATCH] Fix static analysis issues for thermal daemon

Below issues will be solved with this change.

+------------------------------+
|COPY_INSTEAD_OF_MOVE          |
|Waiting while holding a lock  |
|Resource leak                 |
|Uninitialized scalar variable |
|Argument cannot be negative   |
+------------------------------+

Signed-off-by: Manvi Bajaj <manvi.bajaj@intel.com>
---
 src/android_main.cpp          | 20 ++++++++++++++--
 src/thd_cdev_gen_sysfs.h      |  2 +-
 src/thd_cdev_rapl_dram.cpp    |  2 +-
 src/thd_cdev_therm_sys_fs.h   |  2 +-
 src/thd_engine.cpp            | 43 ++++++++++++++++++++---------------
 src/thd_rapl_power_meter.cpp  |  2 +-
 src/thd_sensor.cpp            |  2 +-
 src/thd_sensor.h              |  2 +-
 src/thd_sensor_virtual.cpp    |  6 ++---
 src/thd_trip_point.cpp        |  5 ++--
 src/thd_trt_art_reader.h      |  2 +-
 src/thd_zone_cpu.cpp          |  4 +++-
 src/thd_zone_dynamic.cpp      |  4 ++--
 src/thd_zone_generic.cpp      |  2 +-
 src/thd_zone_therm_sys_fs.cpp |  2 +-
 15 files changed, 63 insertions(+), 37 deletions(-)

diff --git a/src/android_main.cpp b/src/android_main.cpp
index 9423fb2..cbc78a6 100644
--- a/src/android_main.cpp
+++ b/src/android_main.cpp
@@ -125,8 +125,21 @@ static void daemonize(char *rundir, char *pidfile) {
 	}
 
 	i = open("/dev/null", O_RDWR);
-	dup(i);
-	dup(i);
+	if (i == -1)
+	{
+		thd_log_info("Could not open /dev/null\n");
+		exit(EXIT_FAILURE);
+	}
+	int ret = dup(i);
+	if (ret == -1) {
+		close(i);
+		exit(EXIT_FAILURE);
+	}
+	int ret1 = dup(i);
+	if (ret1 == -1) {
+		close(i);
+		exit(EXIT_FAILURE);
+	}
 	chdir(rundir);
 
 	pid_file_handle = open(pidfile, O_RDWR | O_CREAT, 0600);
@@ -148,6 +161,9 @@ static void daemonize(char *rundir, char *pidfile) {
 	thd_log_info("Thermal PID %d\n", getpid());
 	snprintf(str, sizeof(str), "%d\n", getpid());
 	write(pid_file_handle, str, strlen(str));
+	close(ret);
+	close(ret1);
+	close(i);
 }
 
 static void print_usage(FILE* stream, int exit_code) {
diff --git a/src/thd_cdev_gen_sysfs.h b/src/thd_cdev_gen_sysfs.h
index f5c76a4..4cb6c82 100644
--- a/src/thd_cdev_gen_sysfs.h
+++ b/src/thd_cdev_gen_sysfs.h
@@ -31,7 +31,7 @@ protected:
 
 public:
 	cthd_gen_sysfs_cdev(unsigned int _index, std::string control_path) :
-			cthd_cdev(_index, control_path) {
+			cthd_cdev(_index, std::move(control_path)) {
 	}
 	virtual void set_curr_state(int state, int arg);
 	virtual void set_curr_state_raw(int state, int arg);
diff --git a/src/thd_cdev_rapl_dram.cpp b/src/thd_cdev_rapl_dram.cpp
index c2196aa..02a7148 100644
--- a/src/thd_cdev_rapl_dram.cpp
+++ b/src/thd_cdev_rapl_dram.cpp
@@ -62,7 +62,7 @@ int cthd_sysfs_cdev_rapl_dram::update() {
 	if (!found)
 		return THD_ERROR;
 
-	cdev_sysfs.update_path(path_name);
+	cdev_sysfs.update_path(std::move(path_name));
 
 	return cthd_sysfs_cdev_rapl::update();
 }
diff --git a/src/thd_cdev_therm_sys_fs.h b/src/thd_cdev_therm_sys_fs.h
index aad52cf..1e08ec9 100644
--- a/src/thd_cdev_therm_sys_fs.h
+++ b/src/thd_cdev_therm_sys_fs.h
@@ -32,7 +32,7 @@ protected:
 
 public:
 	cthd_sysfs_cdev(unsigned int _index, std::string control_path) :
-			cthd_cdev(_index, control_path) {
+			cthd_cdev(_index, std::move(control_path)) {
 	}
 	virtual void set_curr_state(int state, int arg);
 	virtual int get_curr_state();
diff --git a/src/thd_engine.cpp b/src/thd_engine.cpp
index 53930ef..14425be 100644
--- a/src/thd_engine.cpp
+++ b/src/thd_engine.cpp
@@ -110,13 +110,15 @@ void cthd_engine::thd_engine_thread() {
 				thd_log_warn("Thermal Daemon is disabled \n");
 				continue;
 			}
+			std::vector<cthd_zone *> zones_copy;
 			pthread_mutex_lock(&thd_engine_mutex);
+			zones_copy = zones;
+			pthread_mutex_unlock(&thd_engine_mutex);
 			// Polling mode enabled. Trigger a temp change message
-			for (i = 0; i < zones.size(); ++i) {
-				cthd_zone *zone = zones[i];
+			for (i = 0; i < zones_copy.size(); ++i) {
+				cthd_zone *zone = zones_copy[i];
 				zone->zone_temperature_notification(0, 0);
 			}
-			pthread_mutex_unlock(&thd_engine_mutex);
 			thz_last_temp_ind_time = tm;
 		}
 		if (uevent_fd >= 0 && poll_fds[uevent_fd].revents & POLLIN) {
@@ -128,12 +130,14 @@ void cthd_engine::thd_engine_thread() {
 				thd_log_debug("kobj uevent for thermal\n");
 				if ((tm - thz_last_uevent_time)
 						>= thz_notify_debounce_interval) {
+					std::vector<cthd_zone *> zones_copy;
 					pthread_mutex_lock(&thd_engine_mutex);
-					for (i = 0; i < zones.size(); ++i) {
-						cthd_zone *zone = zones[i];
+					zones_copy = zones;
+					pthread_mutex_unlock(&thd_engine_mutex);
+					for (i = 0; i < zones_copy.size(); ++i) {
+						cthd_zone *zone = zones_copy[i];
 						zone->zone_temperature_notification(0, 0);
 					}
-					pthread_mutex_unlock(&thd_engine_mutex);
 				} else {
 					thd_log_debug("IGNORE THZ kevent\n");
 				}
@@ -934,12 +938,12 @@ int cthd_engine::user_add_sensor(std::string name, std::string path) {
 	for (unsigned int i = 0; i < sensors.size(); ++i) {
 		if (sensors[i]->get_sensor_type() == name) {
 			sensor = sensors[i];
-			sensor->update_path(path);
+			sensor->update_path(std::move(path));
 			pthread_mutex_unlock(&thd_engine_mutex);
 			return THD_SUCCESS;
 		}
 	}
-	sensor = new cthd_sensor(current_sensor_index, path, name, SENSOR_TYPE_RAW);
+	sensor = new cthd_sensor(current_sensor_index, std::move(path), std::move(name), SENSOR_TYPE_RAW);
 	if (sensor->sensor_update() != THD_SUCCESS) {
 		delete sensor;
 		pthread_mutex_unlock(&thd_engine_mutex);
@@ -967,7 +971,7 @@ int cthd_engine::user_add_virtual_sensor(std::string name,
 			if (sensor->is_virtual()) {
 				cthd_sensor_virtual *virt_sensor =
 						(cthd_sensor_virtual *) sensor;
-				ret = virt_sensor->sensor_update_param(dep_sensor, slope,
+				ret = virt_sensor->sensor_update_param(std::move(dep_sensor), slope,
 						intercept);
 			} else {
 				pthread_mutex_unlock(&thd_engine_mutex);
@@ -979,8 +983,8 @@ int cthd_engine::user_add_virtual_sensor(std::string name,
 	}
 	cthd_sensor_virtual *virt_sensor;
 
-	virt_sensor = new cthd_sensor_virtual(current_sensor_index, name,
-			dep_sensor, slope, intercept);
+	virt_sensor = new cthd_sensor_virtual(current_sensor_index, std::move(name),
+			std::move(dep_sensor), slope, intercept);
 	if (virt_sensor->sensor_update() != THD_SUCCESS) {
 		delete virt_sensor;
 		pthread_mutex_unlock(&thd_engine_mutex);
@@ -1022,7 +1026,7 @@ int cthd_engine::user_set_psv_temp(std::string name, unsigned int temp) {
 	int ret;
 
 	pthread_mutex_lock(&thd_engine_mutex);
-	zone = get_zone(name);
+	zone = get_zone(std::move(name));
 	if (!zone) {
 		pthread_mutex_unlock(&thd_engine_mutex);
 		thd_log_warn("user_set_psv_temp\n");
@@ -1040,7 +1044,7 @@ int cthd_engine::user_set_max_temp(std::string name, unsigned int temp) {
 	int ret;
 
 	pthread_mutex_lock(&thd_engine_mutex);
-	zone = get_zone(name);
+	zone = get_zone(std::move(name));
 	if (!zone) {
 		pthread_mutex_unlock(&thd_engine_mutex);
 		thd_log_warn("user_set_max_temp\n");
@@ -1058,7 +1062,7 @@ int cthd_engine::user_add_zone(std::string zone_name, unsigned int trip_temp,
 	int ret = THD_SUCCESS;
 
 	cthd_zone_dynamic *zone = new cthd_zone_dynamic(current_zone_index,
-			zone_name, trip_temp, PASSIVE, sensor_name, cdev_name);
+			std::move(zone_name), trip_temp, PASSIVE, std::move(sensor_name), std::move(cdev_name));
 	if (!zone) {
 		return THD_ERROR;
 	}
@@ -1068,6 +1072,9 @@ int cthd_engine::user_add_zone(std::string zone_name, unsigned int trip_temp,
 		pthread_mutex_unlock(&thd_engine_mutex);
 		zone->set_zone_active();
 		++current_zone_index;
+	} else {
+		delete zone;
+		return THD_ERROR;
 	}
 
 	for (unsigned int i = 0; i < zones.size(); ++i) {
@@ -1081,7 +1088,7 @@ int cthd_engine::user_set_zone_status(std::string name, int status) {
 	cthd_zone *zone;
 
 	pthread_mutex_lock(&thd_engine_mutex);
-	zone = get_zone(name);
+	zone = get_zone(std::move(name));
 	if (!zone) {
 		pthread_mutex_unlock(&thd_engine_mutex);
 		return THD_ERROR;
@@ -1102,7 +1109,7 @@ int cthd_engine::user_get_zone_status(std::string name, int *status) {
 	cthd_zone *zone;
 
 	pthread_mutex_lock(&thd_engine_mutex);
-	zone = get_zone(name);
+	zone = get_zone(std::move(name));
 	if (!zone) {
 		pthread_mutex_unlock(&thd_engine_mutex);
 		return THD_ERROR;
@@ -1146,12 +1153,12 @@ int cthd_engine::user_add_cdev(std::string cdev_name, std::string cdev_path,
 	if (!cdev) {
 		cthd_gen_sysfs_cdev *cdev_sysfs;
 
-		cdev_sysfs = new cthd_gen_sysfs_cdev(current_cdev_index, cdev_path);
+		cdev_sysfs = new cthd_gen_sysfs_cdev(current_cdev_index, std::move(cdev_path));
 		if (!cdev_sysfs) {
 			pthread_mutex_unlock(&thd_engine_mutex);
 			return THD_ERROR;
 		}
-		cdev_sysfs->set_cdev_type(cdev_name);
+		cdev_sysfs->set_cdev_type(std::move(cdev_name));
 		if (cdev_sysfs->update() != THD_SUCCESS) {
 			delete cdev_sysfs;
 			pthread_mutex_unlock(&thd_engine_mutex);
diff --git a/src/thd_rapl_power_meter.cpp b/src/thd_rapl_power_meter.cpp
index 204a15f..1eb784b 100644
--- a/src/thd_rapl_power_meter.cpp
+++ b/src/thd_rapl_power_meter.cpp
@@ -107,7 +107,7 @@ void cthd_rapl_power_meter::rapl_read_domains(const char *dir_name) {
 					domain.type = DRAM;
 				}
 				if (measure_mask & domain.type) {
-					domain.name = buffer;
+					domain.name = std::move(buffer);
 					domain.path = std::string(dir_name)
 							+ std::string(dir_entry->d_name);
 					domain_list.push_back(domain);
diff --git a/src/thd_sensor.cpp b/src/thd_sensor.cpp
index 8d9604c..520e60b 100644
--- a/src/thd_sensor.cpp
+++ b/src/thd_sensor.cpp
@@ -28,7 +28,7 @@
 cthd_sensor::cthd_sensor(int _index, std::string control_path,
 		std::string _type_str, int _type) :
 		index(_index), type(_type), sensor_sysfs(control_path.c_str()), sensor_active(
-				false), type_str(_type_str), async_capable(false), virtual_sensor(
+				false), type_str(std::move(_type_str)), async_capable(false), virtual_sensor(
 				false), thresholds(0), scale(1) {
 
 }
diff --git a/src/thd_sensor.h b/src/thd_sensor.h
index df84d05..300271f 100644
--- a/src/thd_sensor.h
+++ b/src/thd_sensor.h
@@ -69,7 +69,7 @@ public:
 	int set_threshold(int index, int temp);
 	;
 	void update_path(std::string str) {
-		sensor_sysfs.update_path(str);
+		sensor_sysfs.update_path(std::move(str));
 	}
 	void set_async_capable(bool capable) {
 		async_capable = capable;
diff --git a/src/thd_sensor_virtual.cpp b/src/thd_sensor_virtual.cpp
index 4cdd966..568064a 100644
--- a/src/thd_sensor_virtual.cpp
+++ b/src/thd_sensor_virtual.cpp
@@ -26,8 +26,8 @@
 
 cthd_sensor_virtual::cthd_sensor_virtual(int _index, std::string _type_str,
 		std::string _link_type_str, double _multiplier, double _offset) :
-		cthd_sensor(_index, "none", _type_str), link_sensor(NULL), link_type_str(
-				_link_type_str), multiplier(_multiplier), offset(_offset) {
+		cthd_sensor(_index, "none", std::move(_type_str)), link_sensor(NULL), link_type_str(
+				std::move(_link_type_str)), multiplier(_multiplier), offset(_offset) {
 	virtual_sensor = true;
 }
 
@@ -59,7 +59,7 @@ unsigned int cthd_sensor_virtual::read_temperature() {
 
 int cthd_sensor_virtual::sensor_update_param(std::string new_dep_sensor, double slope, double intercept)
 {
-	cthd_sensor *sensor = thd_engine->search_sensor(new_dep_sensor);
+	cthd_sensor *sensor = thd_engine->search_sensor(std::move(new_dep_sensor));
 
 	if (sensor)
 		link_sensor = sensor;
diff --git a/src/thd_trip_point.cpp b/src/thd_trip_point.cpp
index 58b09bb..582eb55 100644
--- a/src/thd_trip_point.cpp
+++ b/src/thd_trip_point.cpp
@@ -44,7 +44,7 @@ void cthd_trip_point::set_dependency(std::string cdev, std::string state_str)
 {
 	cthd_cdev *cdev_ptr;
 
-	cdev_ptr = thd_engine->search_cdev(cdev);
+	cdev_ptr = thd_engine->search_cdev(std::move(cdev));
 	if (cdev_ptr) {
 		int match;
 		int state_index = 0;
@@ -345,11 +345,12 @@ void cthd_trip_point::thd_trip_point_add_cdev(cthd_cdev &cdev, int influence,
 int cthd_trip_point::thd_trip_point_add_cdev_index(int _index, int influence) {
 	cthd_cdev *cdev = thd_engine->thd_get_cdev_at_index(_index);
 	if (cdev) {
-		trip_pt_cdev_t thd_cdev;
+		trip_pt_cdev_t thd_cdev = {};
 		thd_cdev.cdev = cdev;
 		thd_cdev.influence = influence;
 		thd_cdev.sampling_priod = 0;
 		thd_cdev.last_op_time = 0;
+		thd_cdev.target_state_valid = 0;
 		trip_cdev_add(thd_cdev);
 		return THD_SUCCESS;
 	} else {
diff --git a/src/thd_trt_art_reader.h b/src/thd_trt_art_reader.h
index db8b012..d30f586 100644
--- a/src/thd_trt_art_reader.h
+++ b/src/thd_trt_art_reader.h
@@ -45,7 +45,7 @@ struct rel_object_t {
 
 	rel_object_t(std::string name) {
 		target_device = name;
-		target_sensor = name;
+		target_sensor = std::move(name);
 	}
 };
 
diff --git a/src/thd_zone_cpu.cpp b/src/thd_zone_cpu.cpp
index 051cbf8..97194ba 100644
--- a/src/thd_zone_cpu.cpp
+++ b/src/thd_zone_cpu.cpp
@@ -150,7 +150,9 @@ int cthd_zone_cpu::parse_cdev_order() {
 			}
 		}
 		parser.parser_deinit();
-		return ret;
+	}
+	else {
+		parser.parser_deinit();
 	}
 
 	return ret;
diff --git a/src/thd_zone_dynamic.cpp b/src/thd_zone_dynamic.cpp
index 4009b67..b14fc5d 100644
--- a/src/thd_zone_dynamic.cpp
+++ b/src/thd_zone_dynamic.cpp
@@ -10,8 +10,8 @@
 
 cthd_zone_dynamic::cthd_zone_dynamic(int index, std::string _name,
 		unsigned int _trip_temp, trip_point_type_t _trip_type, std::string _sensor, std::string _cdev) :
-		cthd_zone(index, ""), name(_name), trip_temp(_trip_temp), trip_type(_trip_type), sensor_name(
-				_sensor), cdev_name(_cdev) {
+		cthd_zone(index, ""), name(std::move(_name)), trip_temp(_trip_temp), trip_type(_trip_type), sensor_name(
+				std::move(_sensor)), cdev_name(std::move(_cdev)) {
 	type_str = name;
 }
 
diff --git a/src/thd_zone_generic.cpp b/src/thd_zone_generic.cpp
index 3d60bf7..c05752a 100644
--- a/src/thd_zone_generic.cpp
+++ b/src/thd_zone_generic.cpp
@@ -28,7 +28,7 @@
 cthd_zone_generic::cthd_zone_generic(int index, int _config_index,
 		std::string type) :
 		cthd_zone(index, ""), config_index(_config_index) {
-	type_str = type;
+	type_str = std::move(type);
 
 }
 
diff --git a/src/thd_zone_therm_sys_fs.cpp b/src/thd_zone_therm_sys_fs.cpp
index 0e3c25e..dacc463 100644
--- a/src/thd_zone_therm_sys_fs.cpp
+++ b/src/thd_zone_therm_sys_fs.cpp
@@ -27,7 +27,7 @@
 #include <stdlib.h>
 
 cthd_sysfs_zone::cthd_sysfs_zone(int count, std::string path) :
-		cthd_zone(count, path), trip_point_cnt(0) {
+		cthd_zone(count, std::move(path)), trip_point_cnt(0) {
 
 	std::stringstream tc_type_dev;
 	tc_type_dev << index << "/type";
-- 
2.48.1

